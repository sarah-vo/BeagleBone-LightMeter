/* automatically generated by rust-bindgen */

pub const MAX_EVENT_TIMESTAMPS: u32 = 4096;
pub const Period_whichEvent_PERIOD_EVENT_SAMPLE_LIGHT: Period_whichEvent = 0;
pub const Period_whichEvent_NUM_PERIOD_EVENTS: Period_whichEvent = 1;
pub type Period_whichEvent = u32;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct Period_statistics_t {
    pub numSamples: ::std::os::raw::c_int,
    pub minPeriodInMs: f64,
    pub maxPeriodInMs: f64,
    pub avgPeriodInMs: f64,
}
#[test]
fn bindgen_test_layout_Period_statistics_t() {
    assert_eq!(
        ::std::mem::size_of::<Period_statistics_t>(),
        32usize,
        concat!("Size of: ", stringify!(Period_statistics_t))
    );
    assert_eq!(
        ::std::mem::align_of::<Period_statistics_t>(),
        8usize,
        concat!("Alignment of ", stringify!(Period_statistics_t))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<Period_statistics_t>())).numSamples as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(Period_statistics_t),
            "::",
            stringify!(numSamples)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<Period_statistics_t>())).minPeriodInMs as *const _ as usize
        },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(Period_statistics_t),
            "::",
            stringify!(minPeriodInMs)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<Period_statistics_t>())).maxPeriodInMs as *const _ as usize
        },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(Period_statistics_t),
            "::",
            stringify!(maxPeriodInMs)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<Period_statistics_t>())).avgPeriodInMs as *const _ as usize
        },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(Period_statistics_t),
            "::",
            stringify!(avgPeriodInMs)
        )
    );
}
extern "C" {
    pub fn Period_init();
}
extern "C" {
    pub fn Period_cleanup();
}
extern "C" {
    pub fn Period_markEvent(whichEvent: Period_whichEvent);
}
extern "C" {
    pub fn Period_getStatisticsAndClear(
        whichEvent: Period_whichEvent,
        pStats: *mut Period_statistics_t,
    );
}
